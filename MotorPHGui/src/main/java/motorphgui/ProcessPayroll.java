/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package motorphgui;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

public class ProcessPayroll extends javax.swing.JFrame {

    private static final String CSV_FILE = "C:\\Users\\HP\\OneDrive\\Desktop\\CP2\\Motorph\\employee.csv";
    private List<PayrollRecord> payrollList = new ArrayList<>();

    public ProcessPayroll() {
        initComponents();
        populatePayrollTable(); // Load payroll into table after UI initializes
    }

    public List<PayrollRecord> loadPayrollData() {
        payrollList.clear();

        try (BufferedReader br = new BufferedReader(new FileReader(CSV_FILE))) {
            String line;
            boolean isFirstLine = true;

            while ((line = br.readLine()) != null) {
                if (isFirstLine) {
                    isFirstLine = false;
                    continue; // Skip header
                }

                String[] tokens = line.split(",");
                if (tokens.length < 14) continue;

                String employeeId = tokens[0];
                double basicSalary = Double.parseDouble(tokens[13]);

                double sss = DeductionsCalculator.computeSSS(basicSalary);
                double philHealth = DeductionsCalculator.computePhilHealth(basicSalary);
                double pagibig = DeductionsCalculator.computePagibig(basicSalary);
                double tax = DeductionsCalculator.computeWithholdingTax(basicSalary);

                double totalDeductions = sss + philHealth + pagibig + tax;
                double netPay = basicSalary - totalDeductions;

                payrollList.add(new PayrollRecord(employeeId, basicSalary, sss, philHealth, pagibig, tax, totalDeductions, netPay));
            }
        } catch (IOException e) {
            e.printStackTrace();
        }

        return payrollList;
    }

    private void populatePayrollTable() {
        List<PayrollRecord> payrollList = loadPayrollData();

        javax.swing.table.DefaultTableModel model = (javax.swing.table.DefaultTableModel) jTable2.getModel();
        model.setRowCount(0); // Clear existing rows

        for (PayrollRecord record : payrollList) {
            model.addRow(new Object[]{
                record.getEmployeeId(),
                String.format("%.2f", record.getBasicSalary()),
                String.format("%.2f", record.getSss()),
                String.format("%.2f", record.getPhilHealth()),
                String.format("%.2f", record.getPagibig()),
                String.format("%.2f", record.getTax()),
                String.format("%.2f", record.getTotalDeductions()),
                String.format("%.2f", record.getNetPay())
            });
        }
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Employee ID", "Basic Salary", "SSS", "PhilHealth", "Pag-IBIG", "Tax", "Total Deductions", "Net Pay"
            }
        ));
        jScrollPane3.setViewportView(jTable2);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 353, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(40, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 236, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(37, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public static void main(String args[]) {
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (Exception ex) {
            java.util.logging.Logger.getLogger(ProcessPayroll.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }

        java.awt.EventQueue.invokeLater(() -> {
            new ProcessPayroll().setVisible(true);
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTable jTable2;
    // End of variables declaration//GEN-END:variables
}
